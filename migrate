#!/usr/bin/env python3

import os
import sys
import time
import shutil
import signal
import argparse
import subprocess
from subprocess import CalledProcessError
from collections import namedtuple
import logging


CMDOutput = namedtuple('Output', ['stdout', 'stderr'])


class tc:
    SUCCESS = '\033[30m'
    HEADER = '\033[32m'
    SUCCESS = '\033[30m'
    WARNING = '\033[33m'
    ERROR = '\033[31m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def ctrl_c(signal, frame):
    print('\nExiting...')
    sys.exit(0)

def fail(message, code=1):
    logging.error('ERROR:' + message)
    print(tc.ERROR + tc.BOLD + message + tc.ENDC, file=sys.stderr)
    print(tc.ERROR + tc.BOLD + 'See ./migration.log for details.' + tc.ENDC,
          file=sys.stderr)
    sys.exit(code)

def warn(message):
    logging.warning('WARNING:' + message)
    print(tc.WARNING + tc.BOLD + message + tc.ENDC, file=sys.stderr)

def info(message):
    logging.info('INFO:' + message)
    print(tc.BOLD + message + tc.ENDC)

def heading(message):
    logging.info('INFO:' + message)
    print(tc.BOLD + tc.HEADER + message + tc.ENDC)

def parse_args():
    parser = argparse.ArgumentParser(
        description='Migrate a Ubuntu installation to a ZFS root pool.')
    parser.add_argument(
        '--bios', action='store_true',
        help=('migrate a BIOS system, instead of a UEFI system, '
              '(NOT SUPPORTED)'))
    parser.add_argument(
        'disk', help='disk that Ubuntu was installed to')
    parser.add_argument(
        '--part', default=2, type=int,
        help='partition number of the / partition, defaults to 2')
    parser.add_argument(
        '--efi-part', default=1, type=int,
        help='partition number of the EFI partition, defaults to 1')
    parser.add_argument(
        '--swap', type=str, default='auto',
        help=('swap size, in megabytes (M suffix) or gigabytes '
              '(G suffix), defaults to the recommended swap size based'
              'on the amount of RAM'))
    parser.add_argument(
        '--no-swap', action='store_true', help='disable swap space')
    parser.add_argument(
        '--rpool', type=str, default='rpool', help=('name of the root pool'))
    parser.add_argument(
        '--local', action='store_true',
        help=('store /usr/local on a separate ZFS filesystem'))
    parser.add_argument(
        '--opt', action='store_true',
        help=('store /opt on a separate ZFS filesystem'))
    parser.add_argument(
        '--srv', action='store_true',
        help=('store /srv on a separate ZFS filesystem'))
    parser.add_argument(
        '--games', action='store_true',
        help=('store /var/games on a separate ZFS filesystem'))
    parser.add_argument(
        '--mysql', action='store_true',
        help=('store /var/lib/mysql on a separate ZFS filesystem'))
    parser.add_argument(
        '--postgres', action='store_true',
        help=('store /var/lib/postgres on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--mongodb', action='store_true',
    #     help=('store /var/lib/postgre on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--redis', action='store_true',
    #     help=('store /var/lib/redis on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--nfs', action='store_true',
    #     help=('store /var/lib/nfs on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--libvirt', action='store_true',
    #     help=('store /var/lib/libvirt on a separate ZFS filesystem'))
    parser.add_argument(
        '--mail', action='store_true',
        help=('store /var/mail on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--http', action='store_true',
    #     help=('store /srv/http on a separate ZFS filesystem'))
    # parser.add_argument(
    #     '--uwsgi', action='store_true',
    #     help=('store /srv/uwsgi on a separate ZFS filesystem'))
    return parser.parse_args()

def cmd(*args, capture=True, check=True, cwd=None):
    args = [str(arg) for arg in args]
    qouted_args = ['"' + arg + '"' for arg in args]
    logging.info('\nCOMMAND: [' + ', '.join(qouted_args) + ']')
    if capture:
        result = subprocess.run(args,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd)
        stdout = result.stdout.decode('utf-8').rstrip()
        stderr = result.stderr.decode('utf-8').rstrip()
        if stdout:
            logging.info('\nSTDOUT: \n' + stdout)
        if stderr:
            logging.info('\nSTDERR: \n' + stderr)
        if check:
            result.check_returncode()
        return CMDOutput(stdout, stderr)
    subprocess.run(args, check=check, cwd=cwd)

def verify_root():
    if os.geteuid() != 0:
        fail("The 'migrate' script must be run as root.")

def disk_path(disk, part=None):
    if part:
        if disk[-1].isdigit():
            return '/dev/{}p{:d}'.format(disk, part)
        return '/dev/{}{:d}'.format(disk, part)
    else:
        return '/dev/{}'.format(disk)

def verify_disk(disk, part, efi_part=None):
    heading('Verifying disk...')
    try:
        cmd('ls', disk_path(disk))
    except CalledProcessError:
        fail('Disk {} does not exist'.format(
            disk_path(disk)))
    try:
        cmd('ls', disk_path(disk, part))
    except CalledProcessError:
        fail('Partition {} does not exist'.format(
            disk_path(disk, part)))
    if efi_part:
        try:
            cmd('ls', disk_path(disk, efi_part))
        except CalledProcessError:
            fail('EFI partition {} does not exist'.format(
                disk_path(disk, efi_part)))

def cleanup_install(disk):
    heading('Cleaning up remnants of ubiquity installer...')
    cmd('swapoff', '-a')
    for line in cmd('mount').stdout.splitlines():
        if line.startswith(disk_path(disk)):
            try:
                cmd('umount', line.split()[0])
            except CalledProcessError:
                fail('Could not unmount {}.'.format(line.split()[0]))


def install_dependencies():
    heading('Installing dependencies...')
    try:
        cmd('add-apt-repository', 'universe')
        cmd('apt-get', 'update')
        cmd('apt-get', 'install', '--yes', 'dosfstools', 'e2fsprogs',
            'gdisk', 'parted', 'zfs-initramfs')
    except CalledProcessError:
        fail('Could not install dependencies.')


def ext_min_blocks(disk, part):
    result = cmd('resize2fs', '-P', disk_path(disk, part))
    blocks = int(
        result.stdout.splitlines()[-1].split(':')[1].strip())
    return blocks

def ext_block_count(disk, part):
    result = cmd('dumpe2fs', '-h', disk_path(disk, part))
    blocks = int([l for l in result.stdout.splitlines()
         if l.startswith('Block count')][0].split(':')[1].strip())
    return blocks


def ext_block_size(disk, part):
    result = cmd('dumpe2fs', '-h', disk_path(disk, part))
    block_size = int([l for l in result.stdout.splitlines()
         if l.startswith('Block size')][0].split(':')[1].strip())
    return block_size


def check_free_space(disk, part):
    heading('Checking free space...')
    try:
        cmd('e2fsck', '-f', disk_path(disk, part), capture=False)
        min_blocks = ext_min_blocks(disk, part)
        total_blocks = ext_block_count(disk, part)
        percentage = min_blocks*100/total_blocks
        info('Filesystem is {:d}% full.'.format(int(percentage)))
        if percentage > 45:
            fail(('Not enough free space on root partition {} for '
                  'migration.').format(disk_path(disk, part)))
    except CalledProcessError:
        fail('Filesystem corrupted.')


def partitions(disk):
    result = cmd('sgdisk', '--print', disk_path(disk))
    parts = [int(l.split()[0]) for l in result.stdout.splitlines()[11:]]
    return parts


def move_root(disk, part):
    heading('Moving old / partition to end of drive...')
    try:
        cmd('resize2fs', '-M', disk_path(disk, part))
        block_size = ext_block_size(disk, part)
        blocks = ext_block_count(disk, part)
        new_size = int(blocks*block_size/1024/1024) # in megabytes
        cmd('sgdisk', '--delete', '{:d}'.format(part), disk_path(disk))
        cmd('sgdisk',
            '--new', '{:d}:0:+{:d}M'.format(part, new_size + 128),
            '--typecode', '{:d}:8300'.format(part), disk_path(disk))
        new_part = max(partitions(disk)) + 1
        cmd('sgdisk',
            '--new', '{:d}:-{:d}M:0'.format(new_part, new_size + 256),
            '--typecode', '{:d}:8300'.format(new_part), disk_path(disk))
        cmd('partprobe', disk_path(disk))
        time.sleep(2)
        cmd('wipefs', '-a', disk_path(disk, part))
        cmd('dd', 'bs=64K', 'conv=noerror,sync',
            'if={:s}'.format(disk_path(disk, part)),
            'of={:s}'.format(disk_path(disk, new_part)))
        cmd('partprobe', disk_path(disk))
        # will fail first time due to checksums, should pass the second time
        cmd('e2fsck', '-f', disk_path(disk, new_part),
            capture=False, check=False)
        cmd('e2fsck', '-f', disk_path(disk, new_part), capture=False)
        cmd('sgdisk', '--delete', part, disk_path(disk))
    except CalledProcessError:
        fail('Could not move old root partition to end of drive.')

def mount_source_filesystem(disk):
    heading('Mounting source filesystem at /source...')
    try:
        cmd('mkdir', '-p', '/source')
        cmd('mount', disk_path(disk, max(partitions(disk))), '/source')
    except CalledProcessError:
        fail('Could not mount source filesystem.')

def disk_id(disk):
    for file in os.listdir('/dev/disk/by-id/'):
        disk_id = os.path.join('/dev/disk/by-id', file)
        if disk == os.path.basename(os.path.realpath(disk_id)):
            return disk_id

def create_root_pool(disk, part, pool):
    heading(
        'Creating root pool {:s} on disk {:s}...'.format(pool, disk))
    try:
        cmd('sgdisk',
            '--new', '{:d}:0:0'.format(part),
            '--typecode', '{:d}:BF01'.format(part), disk_path(disk))
        cmd('partprobe', disk_path(disk))
        cmd('wipefs', '-a', disk_path(disk, part))
        cmd('mkdir', '-p', '/target')
        cmd('partprobe', disk_path(disk))
        cmd('zpool', 'create', '-f', '-o', 'ashift=12',
            '-O', 'atime=off', '-O', 'canmount=off',
            '-O', 'compression=lz4', '-O', 'normalization=formD',
            '-O', 'xattr=sa', '-O', 'mountpoint=/', '-R', '/target',
            pool, disk_id(disk) + '-part{:d}'.format(part))
    except CalledProcessError:
        fail('Could not mount source filesystem.')

def zfs_create(pool, filesystem, snapshot=True, **kwargs):
    info('New ZFS dataset {:s}/{:s}'.format(pool, filesystem))
    option_array = []
    if not snapshot:
        option_array.extend(['-o', 'com.sun:auto-snapshot=false'])
    for key, value in kwargs.items():
        if isinstance(value, bool):
            if value:
                option_array.extend(['-o', '{:s}=on'.format(key)])
            else:
                option_array.extend(['-o', '{:s}=off'.format(key)])
        else:
            option_array.extend(['-o', '{:s}={:s}'.format(key, value)])
    cmd('zfs', 'create', *option_array,
        '{:s}/{:s}'.format(pool, filesystem))

def create_filesystems(
        pool, local=False, opt=False, srv=False, games=False,
        mysql=False, postgres=False, mail=False):
    heading('Creating filesystems...')
    try:
        info('Creating /')
        zfs_create(
            pool, 'ROOT', mountpoint='none', canmount=False)
        zfs_create(
            pool, 'ROOT/ubuntu', mountpoint='/', canmount='noauto')
        cmd('zfs', 'mount', '{:s}/ROOT/ubuntu'.format(pool))
        info('Creating /home')
        zfs_create(pool, 'home', setuid=False)
        info('Creating /root')
        zfs_create(pool, 'home/root', mountpoint='/root')
        zfs_create(pool, 'var', canmount=False, setuid=False, exec=False)
        info('Creating /var/cache')
        zfs_create(pool, 'var/cache', snapshot=False)
        info('Creating /var/log')
        zfs_create(pool, 'var/log', acltype='posixacl', xattr='sa')
        info('Creating /var/spool')
        zfs_create(pool, 'var/spool', snapshot=False)
        info('Creating /var/tmp')
        zfs_create(pool, 'var/tmp', snapshot=False, exec=False)
        if local:
            info('Creating /usr/local')
            zfs_create(pool, 'local', mountpoint='/usr/local')
        if opt:
            info('Creating /opt')
            zfs_create(pool, 'opt')
        if srv:
            info('Creating /srv')
            zfs_create(pool, 'srv', exec=False)
        if games:
            info('Creating /var/games')
            zfs_create(pool, 'var/games', exec=True)
        if mysql:
            info('Creating /var/lib/mysql')
            zfs_create(pool, 'var/mysql', mountpoint='/var/lib/mysql')
        if postgres:
            info('Creating /var/lib/postgres')
            zfs_create(pool, 'var/postgres', mountpoint='/var/lib/postgres')
        if mail:
            info('Creating /var/mail')
            zfs_create(pool, 'var/mail')
        for user in os.listdir('/source/home/'):
            info('Creating /home/{:s}'.format(user))
            zfs_create(pool, 'home/{:s}'.format(user))
            cmd('chmod',
                '--reference=/source/home/{:s}'.format(user),
                '/target/home/{:s}'.format(user))
        # /var/log and /var/tmp must be legacy mounted to avoid race
        # conditions.
        cmd('zfs', 'set', 'mountpoint=legacy', '{:s}/var/log'.format(pool))
        cmd('zfs', 'set', 'mountpoint=legacy', '{:s}/var/tmp'.format(pool))
        cmd('mkdir', '-p', '/target/var/log')
        cmd('mkdir', '-p', '/target/var/tmp')
        cmd('mount', '-t', 'zfs',
            '{:s}/var/log'.format(pool), '/target/var/log')
        cmd('mount', '-t', 'zfs',
            '{:s}/var/tmp'.format(pool), '/target/var/tmp')
    except CalledProcessError:
        fail('Failed to create filesystems.')

def clone_root_filesystem():
    heading('Cloning existing installation...')
    try:
        cmd('rsync', '-aX', '/source/.', '/target/.')
        cmd('rsync', '-acX', '/source/.', '/target/.')
        cmd('rm', '-f', '/target/swapfile')
    except CalledProcessError:
        fail('Failed to clone old installation.')

def fix_fstab(pool):
    heading('Fixing fstab...')
    shutil.copyfile('/target/etc/fstab', '/target/etc/fstab.orig')
    with open('/target/etc/fstab', 'w') as outfile:
        with open('/target/etc/fstab.orig') as infile:
            for line in infile:
                if (not line.startswith('#') and line.split()[1] != '/' 
                        and line.split()[2] != 'swap'):
                    outfile.write(line)
        outfile.write(
            '\n{:s}/var/log  /var/log  zfs  defaults  0  0\n'.format(pool))
        outfile.write(
            '\n{:s}/var/tmp  /var/tmp  zfs  defaults  0  0\n'.format(pool))
    with open('/target/etc/initramfs-tools/conf.d/resume', 'w') as outfile:
        outfile.write('RESUME=none\n')

def chroot_cmd(*args, capture=True):
    cwd = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'arrowroot')
    result = cmd('./arrowroot', '/target', *args, capture=capture, cwd=cwd)
    return result

def install_grub(disk, efi_part):
    heading('Installing GRUB...')
    try:
        cmd('mount', disk_path(disk, efi_part), '/target/boot/efi')
        chroot_cmd('add-apt-repository', 'universe')
        chroot_cmd('apt-get', 'update')
        chroot_cmd('apt-get', 'install', '--yes',
                   'zfs-initramfs', 'zfs-auto-snapshot')
        chroot_cmd('apt-get', 'install', '--yes',
                   '-o', 'Dpkg::Options::=--force-confdef',
                   '-o', 'Dpkg::Options::=--force-confnew',
                   'grub-efi-amd64', )
        if 'zfs' not in chroot_cmd('grub-probe', '/').stdout:
            fail('GRUB does not support ZFS booting, migration failed')
        chroot_cmd('update-initramfs', '-c', '-k', 'all')
        # Enable full debug output on boot.
        shutil.copyfile(
            '/target/etc/default/grub', '/target/etc/default/grub.orig')
        with open('/target/etc/default/grub', 'w') as outfile:
            with open('target/etc/default/grub') as infile:
                for line in infile:
                    if line.startswith('GRUB_HIDDEN_TIMEOUT='):
                        outfile.write('#' + line)
                    elif line.startswith(
                            'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'):
                        outfile.write('GRUB_CMDLINE_LINUX_DEFAULT=""\n')
                    elif line.startswith('#GRUB_TERMINAL=console'):
                        outfile.write('GRUB_TERMINAL=console\n')
                    else:
                        outfile.write(line)
        chroot_cmd('update-grub')
        chroot_cmd(
            'grub-install', '--target=x86_64-efi',
            '--efi-directory=/boot/efi', '--bootloader-id=ubuntu',
            '--recheck', '--no-floppy')
        if not os.path.isfile('/target/boot/grub/x86_64-efi/zfs.mod'):
            fail('GRUB does not support ZFS booting')
    except CalledProcessError:
        fail('could not install GRUB')

def expand_root(pool, disk, part):
    heading('Expanding ZFS root to fill entire disk...')
    try:
        cmd('umount', '/source')
        cmd('sgdisk', '--delete', str(max(partitions(disk))), disk_path(disk))
        cmd('sgdisk', '--delete', str(part), disk_path(disk))
        cmd('sgdisk', '--new', '{:d}:0:0'.format(part),
            '--typecode', '{:d}:BF01'.format(part), disk_path(disk))
        cmd('partprobe', disk_path(disk))
        time.sleep(2)
        # Must update the grub configuration file so it does not have
        # the old ubuntu entry as an alternative boot option.
        chroot_cmd('update-grub')
        cmd('zpool', 'set', 'autoexpand=on', pool)
        cmd('zpool', 'online', '-e', pool,
            disk_id(disk) + '-part{:d}'.format(part))
    except CalledProcessError:
        fail('could not expand ZFS root')
    finally:
        cmd('zpool', 'set', 'autoexpand=off', pool)

def recommended_swap():
    try:
        ram = int(cmd('free', '--mebi').stdout.splitlines()[1].split()[1])
    except CalledProcessError:
        fail('could not get ram quantity')
    if ram <= 2048:
        return ram*2
    elif ram <= 8192:
        return ram
    elif ram <= 16384:
        return 1024*8
    return ram//2

def create_swap(pool, size):
    heading('Creating swap of size {:d}M...'.format(size))
    try:
        pagesize = cmd('getconf', 'PAGESIZE').stdout
        cmd('zfs', 'create', '-V', '{:d}M'.format(size), '-b', pagesize,
            '-o', 'compression=zle', '-o', 'logbias=throughput', 
            '-o', 'sync=always', '-o', 'primarycache=metadata',
            '-o', 'secondarycache=none', '-o', 'com.sun:auto-snapshot=false',
            '{:s}/swap'.format(pool))
        cmd('mkswap', '-f', '/dev/zvol/{:s}/swap'.format(pool))
    except CalledProcessError:
        fail('could not create swap')
    try:
        with open('/target/etc/fstab', 'a') as outfile:
            line = '\n/dev/zvol/{:s}/swap  none  swap  defaults  0  0\n'
            outfile.write(line.format(pool))
    except IOError:
        fail('could not add swap to fstab')

def create_swap_wrapper(pool, size, no_swap):
    if not no_swap:
        if size == 'auto':
            create_swap(pool, recommended_swap())
        else:
            if size.endswith('M'):
                create_swap(pool, int(size[:-1]))
            elif size.endswith('G'):
                create_swap(pool, int(size[:-1])//1024)
            else:
                fail('unknown swap size specification, {:s}'.format(size))

def initial_snapshot(pool, local=False, opt=False):
    heading('Taking initial snapshot...')
    try:
        cmd('zfs', 'snapshot', '-r', '{:s}/ROOT/ubuntu@initial'.format(pool))
        if local:
            cmd('zfs', 'snapshot', '-r', '{:s}/local@initial'.format(pool))
        if opt:
            cmd('zfs', 'snapshot', '-r', '{:s}/opt@initial'.format(pool))
    except CalledProcessError:
        fail('could not make initial snapshot')

def copy_log():
    heading('Copying migration log to /root/migration.log...')
    shutil.copyfile('migration.log', '/target/root/migration.log')

def unmount_root(pool):
    heading('Unmounting filesystems...')
    try:
        cmd('umount', '/target/boot/efi')
        cmd('zpool', 'export', pool)
    except CalledProcessError:
        fail('could not unmount filesystems')

def main():
    options = parse_args()
    verify_root()
    verify_disk(options.disk, options.part, options.efi_part)
    cleanup_install(options.disk)
    install_dependencies()
    check_free_space(options.disk, options.part)
    move_root(options.disk, options.part)
    mount_source_filesystem(options.disk)
    create_root_pool(options.disk, options.part, options.rpool)
    create_filesystems(
        options.rpool, local=options.local, opt=options.opt, 
        srv=options.srv, games=options.games, mysql=options.mysql,
        postgres=options.postgres, mail=options.mail)
    clone_root_filesystem()
    fix_fstab(options.rpool)
    install_grub(options.disk, options.efi_part)
    expand_root(options.rpool, options.disk, options.part)
    create_swap_wrapper(options.rpool, options.swap, options.no_swap)
    initial_snapshot(options.rpool, options.local, options.opt)
    copy_log() # copy log ot /root/migration.log on new system
    unmount_root(options.rpool)
    info('Migration complete, you may now reboot into your new ZFS ROOT pool.')

if __name__ == '__main__':
    logging.basicConfig(format='%(message)s', filename='migration.log', level=logging.DEBUG)
    signal.signal(signal.SIGINT, ctrl_c)
    main()
